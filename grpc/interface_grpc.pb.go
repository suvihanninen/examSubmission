// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: grpc/interface.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistServiceClient is the client API for DistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	GetHeartBeat(ctx context.Context, in *BeatRequest, opts ...grpc.CallOption) (*BeatAck, error)
}

type distServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistServiceClient(cc grpc.ClientConnInterface) DistServiceClient {
	return &distServiceClient{cc}
}

func (c *distServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/service.DistService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/service.DistService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distServiceClient) GetHeartBeat(ctx context.Context, in *BeatRequest, opts ...grpc.CallOption) (*BeatAck, error) {
	out := new(BeatAck)
	err := c.cc.Invoke(ctx, "/service.DistService/GetHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistServiceServer is the server API for DistService service.
// All implementations must embed UnimplementedDistServiceServer
// for forward compatibility
type DistServiceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	GetHeartBeat(context.Context, *BeatRequest) (*BeatAck, error)
	mustEmbedUnimplementedDistServiceServer()
}

// UnimplementedDistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistServiceServer struct {
}

func (UnimplementedDistServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDistServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDistServiceServer) GetHeartBeat(context.Context, *BeatRequest) (*BeatAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeartBeat not implemented")
}
func (UnimplementedDistServiceServer) mustEmbedUnimplementedDistServiceServer() {}

// UnsafeDistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistServiceServer will
// result in compilation errors.
type UnsafeDistServiceServer interface {
	mustEmbedUnimplementedDistServiceServer()
}

func RegisterDistServiceServer(s grpc.ServiceRegistrar, srv DistServiceServer) {
	s.RegisterService(&DistService_ServiceDesc, srv)
}

func _DistService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DistService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DistService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistService_GetHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistServiceServer).GetHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DistService/GetHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistServiceServer).GetHeartBeat(ctx, req.(*BeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistService_ServiceDesc is the grpc.ServiceDesc for DistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.DistService",
	HandlerType: (*DistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DistService_Add_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _DistService_Read_Handler,
		},
		{
			MethodName: "GetHeartBeat",
			Handler:    _DistService_GetHeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/interface.proto",
}
